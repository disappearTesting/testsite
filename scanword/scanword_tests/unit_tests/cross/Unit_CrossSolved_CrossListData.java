package scanword_tests.unit_tests.cross;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import scanword_client.NetClient;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.LinkedHashMap;
import java.util.Map;

public class Unit_CrossSolved_CrossListData {

    private NetClient objClient;
    private URL url;

    @Before
    public void setUp() throws URISyntaxException, MalformedURLException {
        objClient = new NetClient();
        URI uri = new URI("https", "skanword.org", "/rest/cross_list_data/ios", null);
        url = uri.toURL();
    }

    @After
    public void tearDown() {

    }

    @Test
    public void test_CrossSolved_CrossListData() throws IOException, URISyntaxException {
        Map<String, String> paramsCrossListData = new LinkedHashMap<>();
        paramsCrossListData.put("user_id", "3221956");
        paramsCrossListData.put("auth_key", "11ab1a2702a06fe2179661421da565d3");
        paramsCrossListData.put("updates", "ewogICJjNHJ0dWM5OTljMzg2YmJhY2Q5ZmMwYTVhYTk1NzQ5OSIgOiB7CiAgICAidXVzIiA6IHsKICAgICAgInRtIiA6IDIKICAgIH0sCiAgICAiX3VvdCIgOiAxNTMzMDc0NDYwCiAgfSwKICAiZDBkZjdkNjI1NHRqMzRiOGM4NTRiNzhjMTM5NzkzYmQiIDogewogICAgInV1cyIgOiB7CiAgICAgICJ0bSIgOiAyODIKICAgIH0sCiAgICAiX3VvdCIgOiAxNTMzMDc0NDYyCiAgfSwKICAiZmIzOWViZTk3MzRoYzViNDhhamh5YjM1ZjQwMGQ2MjAiIDogewogICAgInV1cyIgOiB7CiAgICAgICJ0bSIgOiAzCiAgICB9LAogICAgIl91b3QiIDogMTUzMzA3NDQ2NAogIH0sCiAgIjhhYTA2ZGEyZDhqajU2MjhlN2Fvb2xjMGIxODFmOGM1IiA6IHsKICAgICJ1dXMiIDogewogICAgICAidG0iIDogMTQ1CiAgICB9LAogICAgIl91b3QiIDogMTUzMzA3NDQ2NiwKICAgICJzaSIgOiBbCiAgICAgIHsKICAgICAgICAiYW1vdW50IiA6IDIsCiAgICAgICAgImFjdGlvbl9uYW1lIiA6ICJidXlJdGVtc0J5SGludHMiLAogICAgICAgICJwYXJhbXMiIDogewogICAgICAgICAgInR5cGUiIDogImNyb3NzIiwKICAgICAgICAgICJpdGVtX2lkIiA6IDE3NjA1CiAgICAgICAgfQogICAgICB9LAogICAgICB7CiAgICAgICAgImFtb3VudCIgOiAyLAogICAgICAgICJhY3Rpb25fbmFtZSIgOiAiYnV5SXRlbXNCeUhpbnRzIiwKICAgICAgICAicGFyYW1zIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJjcm9zcyIsCiAgICAgICAgICAiaXRlbV9pZCIgOiAxNzYwNgogICAgICAgIH0KICAgICAgfQogICAgXQogIH0sCiAgImJiYmQ0OTM0M2Y3YThhNTR0c3MwNzcwYzFlZTEzNGUwIiA6IHsKICAgICJ1aGtiIiA6IHsKICAgICAgImtleXdvcmRfYm9udXMiIDogIltcbiAge1xuICAgIFwiYm9udXNfbmFtZVwiIDogXCJrZXlXb3JkXCIsXG4gICAgXCJwYXJhbXNcIiA6IHtcbiAgICAgIFwiYW1vdW50X3ZpZGVvXCIgOiAwLFxuICAgICAgXCJhbW91bnRfa2V5XCIgOiAxLFxuICAgICAgXCJ0aW1lc3RhbXBcIiA6IFwiMjAxOC0wOC0wMSAwMTowMTowMCArMDAwMFwiLFxuICAgICAgXCJjcm9zc19pZFwiIDogMTc2MDVcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcImJvbnVzX25hbWVcIiA6IFwia2V5V29yZFwiLFxuICAgIFwicGFyYW1zXCIgOiB7XG4gICAgICBcImFtb3VudF92aWRlb1wiIDogMCxcbiAgICAgIFwiYW1vdW50X2tleVwiIDogMSxcbiAgICAgIFwidGltZXN0YW1wXCIgOiBcIjIwMTgtMDgtMDEgMDE6MDI6MDAgKzAwMDBcIixcbiAgICAgIFwiY3Jvc3NfaWRcIiA6IDE3NjA2XG4gICAgfVxuICB9XG5dIgogICAgfSwKICAgICJfdW90IiA6IDE1MzMwNzQ0ODAsCiAgICAidWNtIiA6IHsKICAgICAgImMxNzYwNiIgOiB7CiAgICAgICAgImgiIDogIi4gICAgIC4uLi4uLi4uICAgICAuLiAgLiAgIC4gICAgICAuLi4gIC4uICAuLi4uLiAgLiAgLi4uLi4uLi4uLi4gLiAuLi4uLi4gLi4uLiAuLiAgLi4uLiAgIC4gIC4gLi4uLi4uLi4uIC4gLi4uIC4uLi4gIC4gLi4gLi4uLi4gLi4uLiAuLi4uIC4gICAuLi4uLiAuLi4uLiAuIC4uLi4gIC4gLiAuLi4uLi4gIC4gLi4uLi4uLi4uLi4gLi4uLiAgLi4uLi4uIiwKICAgICAgICAiYSIgOiAi0YQgICAgINC60YHQuNC70L7RhNC+0L0gICAgINCx0YAgINCxICAg0LIgICAgICDRgNC+0LQgINGD0LAgINCw0LzQsdGA0LAgINCxICDQv9C+0LzQsNC30L7QutC80LDRgNGIINC+INGC0LXRgtGA0L7QtCDQutGD0YfQsCDRgdGDICDQvNC40YHRgSAgINCwICDQuyDRgtCw0LjRgtC40LPQsNC70LAg0YIg0LzRg9C7INGB0LrQuNGEICDRgCDRgNCwINGD0LrRgNC+0L8g0LTQuNC80LAg0LrRgNCw0L8g0L8gICDRh9C40LDQvdC+INCw0YXQuNC70Lsg0LAg0LXRhNC40LwgINC6INCzINC70YPRh9Cw0L3QviAg0L0g0YDRg9C60LDQv9GA0L7RgNGD0LHRjCDQsNGH0LDQuyAg0LrQsNGB0YLQtdGCIgogICAgICB9LAogICAgICAiYzE3NjA1IiA6IHsKICAgICAgICAiaCIgOiAiLi4uLi4uLi4gIC4gIC4uLi4uLi4gICAuIC4gICAgLiAgIC4gIC4gLiAgIC4uLi4uLiAuIC4gLi4uLi4uIC4uLi4gIC4gLi4uLi4uLiAuIC4gIC4gLiAgLi4uLiAuICAuLi4uLiAgLiAuICAuIC4gLi4uLi4uIC4gLi4uLiAuLi4uLiAuIC4gLi4uLi4gIC4uLi4uIC4uLi4uLiAgLi4uLiAgIC4gLi4uLiAuLi4uICAgLi4uLi4uLi4uLiAuLi4uLi4gLi4uLi4iLAogICAgICAgICJhIiA6ICLQv9C+0LvQuNGB0LzQtdC9ICDQuiAg0LHRg9GA0LXQu9C+0LwgICDQvSDRjSAgICDQviAgINGAICDRgyDQsCAgINC60YPRgNGC0LrQsCDRgCDRgCDRjtGA0YHQutC40Lkg0LjQsdC40YEgINC+INGB0L7Qu9C+0L3QutCwINGDINC9ICDQviDQuCAg0LrQu9GD0LEg0LwgINGF0LDQvNC60LAgINC9INC6ICDQviDRhCDRiNCw0YDQvdC40YAg0L4g0L/QsNGD0Log0YDQsNGB0YPQuyDQuyDQviDRgdC60YPQvdGBICDRgdCw0LvQsNGCINCz0LXRgNCw0LrQuyAg0LDRgNGM0LUgICDQuyDQvdC+0YLQsCDQsNC90YLQsCAgINCw0LrQvNC60LDQv9C40YLQsNC9INGA0LDQt9Cz0L7QvSDQsNCz0L3QuNGPIgogICAgICB9LAogICAgICAiYzE3NjQzIiA6IHsKICAgICAgICAiaCIgOiAiLiAgICAgICAgICAgICAgLiAgICAgICAgICAgICAgLiAgICAgICAgICAgICAgLiAgICAgICAgICAgICAgLiAuLi4uLiAgICAgICAgLi4uLi4uICAgICAgICAgLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiwKICAgICAgICAiYSIgOiAi0Y0gICAgICAgICAgICAgINCzICAgICAgICAgICAgICDQuCAgICAgICAgICAgICAg0LsgICAgICAgICAgICAgINC+INC+0YHQutC+0LsgICAgICAgINC/0LDRgdGC0L7RgCAgICAgICAgINGBICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgIH0KICAgIH0sCiAgICAidXVzIiA6IHsKICAgICAgInRtIiA6IDI3LAogICAgICAiaGNvIiA6IDI4NCwKICAgICAgInRjIiA6IDI5NCwKICAgICAgImxjIiA6IDMsCiAgICAgICJsZiIgOiB7CiAgICAgICAgImJhY2tncm91bmQiIDogMQogICAgICB9LAogICAgICAiaGx1IiA6IDI4NCwKICAgICAgInRvbGgiIDogMjg0CiAgICB9CiAgfSwKICAiYzQ4ODVjOTk5YzM4ajI1a2NkOWZjMGE1YWE5NTc0OTkiIDogewogICAgInV1cyIgOiB7CiAgICAgICJ0bSIgOiAyCiAgICB9LAogICAgIl91b3QiIDogMTUzMzA3NDQ4MgogIH0sCiAgImQwZGY3ZDYyNWxrajY2ZzhjODU0Yjc4YzEzOTc5M2JkIiA6IHsKICAgICJ1dXMiIDogewogICAgICAidG0iIDogMjgyCiAgICB9LAogICAgIl91b3QiIDogMTUzMzA3NDQ4NAogIH0sCiAgImZiMzllYmV0eTY2aGM1YjQ4YTk1NGIzNWY0MDBkNjIwIiA6IHsKICAgICJ1dXMiIDogewogICAgICAidG0iIDogMwogICAgfSwKICAgICJfdW90IiA6IDE1MzMwNzQ0ODYKICB9LAogICI4YWEwNmRhMmQ4amp0eTY4ZTdhOTk5YzBiMTgxZjhjNSIgOiB7CiAgICAidXVzIiA6IHsKICAgICAgInRtIiA6IDE0NQogICAgfSwKICAgICJfdW90IiA6IDE1MzMwNzQ0ODgsCiAgICAic2kiIDogWwogICAgICB7CiAgICAgICAgImFtb3VudCIgOiAyLAogICAgICAgICJhY3Rpb25fbmFtZSIgOiAiYnV5SXRlbXNCeUhpbnRzIiwKICAgICAgICAicGFyYW1zIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJjcm9zcyIsCiAgICAgICAgICAiaXRlbV9pZCIgOiAxNzYwNQogICAgICAgIH0KICAgICAgfSwKICAgICAgewogICAgICAgICJhbW91bnQiIDogMiwKICAgICAgICAiYWN0aW9uX25hbWUiIDogImJ1eUl0ZW1zQnlIaW50cyIsCiAgICAgICAgInBhcmFtcyIgOiB7CiAgICAgICAgICAidHlwZSIgOiAiY3Jvc3MiLAogICAgICAgICAgIml0ZW1faWQiIDogMTc2MDYKICAgICAgICB9CiAgICAgIH0KICAgIF0KICB9LAogICJiYmJkNDk2NDNmN2E0dzMzM3NzMDc3MGMxZWUxMzRlMCIgOiB7CiAgICAidWhrYiIgOiB7CiAgICAgICJrZXl3b3JkX2JvbnVzIiA6ICJbXG4gIHtcbiAgICBcImJvbnVzX25hbWVcIiA6IFwia2V5V29yZFwiLFxuICAgIFwicGFyYW1zXCIgOiB7XG4gICAgICBcImFtb3VudF92aWRlb1wiIDogMCxcbiAgICAgIFwiYW1vdW50X2tleVwiIDogMSxcbiAgICAgIFwidGltZXN0YW1wXCIgOiBcIjIwMTgtMDgtMDEgMDE6MDE6MjAgKzAwMDBcIixcbiAgICAgIFwiY3Jvc3NfaWRcIiA6IDE3NjA1XG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJib251c19uYW1lXCIgOiBcImtleVdvcmRcIixcbiAgICBcInBhcmFtc1wiIDoge1xuICAgICAgXCJhbW91bnRfdmlkZW9cIiA6IDAsXG4gICAgICBcImFtb3VudF9rZXlcIiA6IDEsXG4gICAgICBcInRpbWVzdGFtcFwiIDogXCIyMDE4LTA4LTAxIDAxOjAyOjIwICswMDAwXCIsXG4gICAgICBcImNyb3NzX2lkXCIgOiAxNzYwNlxuICAgIH1cbiAgfVxuXSIKICAgIH0sCiAgICAiX3VvdCIgOiAxNTMzMDc0NTAwLAogICAgInVjbSIgOiB7CiAgICAgICJjMTc2MDYiIDogewogICAgICAgICJoIiA6ICIuICAgICAuLi4uLi4uLiAgICAgLi4gIC4gICAuICAgICAgLi4uICAuLiAgLi4uLi4gIC4gIC4uLi4uLi4uLi4uIC4gLi4uLi4uIC4uLi4gLi4gIC4uLi4gICAuICAuIC4uLi4uLi4uLiAuIC4uLiAuLi4uICAuIC4uIC4uLi4uIC4uLi4gLi4uLiAuICAgLi4uLi4gLi4uLi4gLiAuLi4uICAuIC4gLi4uLi4uICAuIC4uLi4uLi4uLi4uIC4uLi4gIC4uLi4uLiIsCiAgICAgICAgImEiIDogItGEICAgICDQutGB0LjQu9C+0YTQvtC9ICAgICDQsdGAICDQsSAgINCyICAgICAg0YDQvtC0ICDRg9CwICDQsNC80LHRgNCwICDQsSAg0L/QvtC80LDQt9C+0LrQvNCw0YDRiCDQviDRgtC10YLRgNC+0LQg0LrRg9GH0LAg0YHRgyAg0LzQuNGB0YEgICDQsCAg0Lsg0YLQsNC40YLQuNCz0LDQu9CwINGCINC80YPQuyDRgdC60LjRhCAg0YAg0YDQsCDRg9C60YDQvtC/INC00LjQvNCwINC60YDQsNC/INC/ICAg0YfQuNCw0L3QviDQsNGF0LjQu9C7INCwINC10YTQuNC8ICDQuiDQsyDQu9GD0YfQsNC90L4gINC9INGA0YPQutCw0L/RgNC+0YDRg9Cx0Ywg0LDRh9Cw0LsgINC60LDRgdGC0LXRgiIKICAgICAgfSwKICAgICAgImMxNzYwNSIgOiB7CiAgICAgICAgImgiIDogIi4uLi4uLi4uICAuICAuLi4uLi4uICAgLiAuICAgIC4gICAuICAuIC4gICAuLi4uLi4gLiAuIC4uLi4uLiAuLi4uICAuIC4uLi4uLi4gLiAuICAuIC4gIC4uLi4gLiAgLi4uLi4gIC4gLiAgLiAuIC4uLi4uLiAuIC4uLi4gLi4uLi4gLiAuIC4uLi4uICAuLi4uLiAuLi4uLi4gIC4uLi4gICAuIC4uLi4gLi4uLiAgIC4uLi4uLi4uLi4gLi4uLi4uIC4uLi4uIiwKICAgICAgICAiYSIgOiAi0L/QvtC70LjRgdC80LXQvSAg0LogINCx0YPRgNC10LvQvtC8ICAg0L0g0Y0gICAg0L4gICDRgCAg0YMg0LAgICDQutGD0YDRgtC60LAg0YAg0YAg0Y7RgNGB0LrQuNC5INC40LHQuNGBICDQviDRgdC+0LvQvtC90LrQsCDRgyDQvSAg0L4g0LggINC60LvRg9CxINC8ICDRhdCw0LzQutCwICDQvSDQuiAg0L4g0YQg0YjQsNGA0L3QuNGAINC+INC/0LDRg9C6INGA0LDRgdGD0Lsg0Lsg0L4g0YHQutGD0L3RgSAg0YHQsNC70LDRgiDQs9C10YDQsNC60LsgINCw0YDRjNC1ICAg0Lsg0L3QvtGC0LAg0LDQvdGC0LAgICDQsNC60LzQutCw0L/QuNGC0LDQvSDRgNCw0LfQs9C+0L0g0LDQs9C90LjRjyIKICAgICAgfQogICAgfSwKICAgICJ1dXMiIDogewogICAgICAidG0iIDogMjcsCiAgICAgICJoY28iIDogMjg0LAogICAgICAidGMiIDogMjk0LAogICAgICAibGMiIDogMywKICAgICAgImxmIiA6IHsKICAgICAgICAiYmFja2dyb3VuZCIgOiAxCiAgICAgIH0sCiAgICAgICJobHUiIDogMjg0LAogICAgICAidG9saCIgOiAyODQKICAgIH0KICB9Cn0=");

        objClient.doRequest(url, paramsCrossListData, "POST");

        Assert.assertEquals(200, objClient.getResponseCode());
        Assert.assertEquals("OK", objClient.getResponseMessage());
    }
}
