package scanword_tests.unit_tests.cross;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import scanword_client.NetClient;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.LinkedHashMap;
import java.util.Map;

public class Unit_CrossSolved_Info {

    private NetClient objClient;
    private URL url;

    @Before
    public void setUp() throws URISyntaxException, MalformedURLException {
        objClient = new NetClient();
        URI uri = new URI("https", "scanword-stage.smapps.net", "/rest/info/ios", null);
        url = uri.toURL();
    }

    @After
    public void tearDown() {

    }

    @Test
    public void test_CrossSolved_Info() throws IOException {
        Map<String, String> paramsInfo = new LinkedHashMap<>();
        paramsInfo.put("user_id", "3115890");
        paramsInfo.put("auth_key", "03318dee000cd4407195e0c33d75b8ee");
        paramsInfo.put("updates", "ewogICJjNDg4NWM5OTljMzg2YmJhY2Q5ZmMwYTVhYTk1NzQ5OSIgOiB7CiAgICAidXVzIiA6IHsKICAgICAgInRtIiA6IDIKICAgIH0sCiAgICAiX3VvdCIgOiAxNTMzMDE3MTI4CiAgfSwKICAiZDBkZjdkNjI1bGtqMzRiOGM4NTRiNzhjMTM5NzkzYmQiIDogewogICAgInV1cyIgOiB7CiAgICAgICJ0bSIgOiAyODIKICAgIH0sCiAgICAiX3VvdCIgOiAxNTMzMDE5NDEyCiAgfSwKICAiZmIzOWViZTk3MzRoYzViNDhhOTU0YjM1ZjQwMGQ2MjAiIDogewogICAgInV1cyIgOiB7CiAgICAgICJ0bSIgOiAzCiAgICB9LAogICAgIl91b3QiIDogMTUzMzAxNzEyNwogIH0sCiAgIjhhYTA2ZGEyZDhqajU2MjhlN2E5OTljMGIxODFmOGM1IiA6IHsKICAgICJ1dXMiIDogewogICAgICAidG0iIDogMTQ1CiAgICB9LAogICAgIl91b3QiIDogMTUzMzAxNzMyMywKICAgICJzaSIgOiBbCiAgICAgIHsKICAgICAgICAiYW1vdW50IiA6IDIsCiAgICAgICAgImFjdGlvbl9uYW1lIiA6ICJidXlJdGVtc0J5SGludHMiLAogICAgICAgICJwYXJhbXMiIDogewogICAgICAgICAgInR5cGUiIDogImNyb3NzIiwKICAgICAgICAgICJpdGVtX2lkIiA6IDE3NjA1CiAgICAgICAgfQogICAgICB9LAogICAgICB7CiAgICAgICAgImFtb3VudCIgOiAyLAogICAgICAgICJhY3Rpb25fbmFtZSIgOiAiYnV5SXRlbXNCeUhpbnRzIiwKICAgICAgICAicGFyYW1zIiA6IHsKICAgICAgICAgICJ0eXBlIiA6ICJjcm9zcyIsCiAgICAgICAgICAiaXRlbV9pZCIgOiAxNzYwNgogICAgICAgIH0KICAgICAgfQogICAgXQogIH0sCiAgImJiYmQ0OTM0M2Y3YThhMzMzc3MwNzcwYzFlZTEzNGUwIiA6IHsKICAgICJ1aGtiIiA6IHsKICAgICAgImtleXdvcmRfYm9udXMiIDogIltcbiAge1xuICAgIFwiYm9udXNfbmFtZVwiIDogXCJrZXlXb3JkXCIsXG4gICAgXCJwYXJhbXNcIiA6IHtcbiAgICAgIFwiYW1vdW50X3ZpZGVvXCIgOiAwLFxuICAgICAgXCJhbW91bnRfa2V5XCIgOiAxLFxuICAgICAgXCJ0aW1lc3RhbXBcIiA6IFwiMjAxOC0wNy0zMSAwNjoxNjo1OSArMDAwMFwiLFxuICAgICAgXCJjcm9zc19pZFwiIDogMTc2MDVcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcImJvbnVzX25hbWVcIiA6IFwia2V5V29yZFwiLFxuICAgIFwicGFyYW1zXCIgOiB7XG4gICAgICBcImFtb3VudF92aWRlb1wiIDogMCxcbiAgICAgIFwiYW1vdW50X2tleVwiIDogMSxcbiAgICAgIFwidGltZXN0YW1wXCIgOiBcIjIwMTgtMDctMzEgMDY6MTg6MjIgKzAwMDBcIixcbiAgICAgIFwiY3Jvc3NfaWRcIiA6IDE3NjA2XG4gICAgfVxuICB9XG5dIgogICAgfSwKICAgICJfdW90IiA6IDE1MzMwMTgxNTgsCiAgICAidWNtIiA6IHsKICAgICAgImMxNzYwNiIgOiB7CiAgICAgICAgImgiIDogIi4gICAgIC4uLi4uLi4uICAgICAuLiAgLiAgIC4gICAgICAuLi4gIC4uICAuLi4uLiAgLiAgLi4uLi4uLi4uLi4gLiAuLi4uLi4gLi4uLiAuLiAgLi4uLiAgIC4gIC4gLi4uLi4uLi4uIC4gLi4uIC4uLi4gIC4gLi4gLi4uLi4gLi4uLiAuLi4uIC4gICAuLi4uLiAuLi4uLiAuIC4uLi4gIC4gLiAuLi4uLi4gIC4gLi4uLi4uLi4uLi4gLi4uLiAgLi4uLi4uIiwKICAgICAgICAiYSIgOiAi0YQgICAgINC60YHQuNC70L7RhNC+0L0gICAgINCx0YAgINCxICAg0LIgICAgICDRgNC+0LQgINGD0LAgINCw0LzQsdGA0LAgINCxICDQv9C+0LzQsNC30L7QutC80LDRgNGIINC+INGC0LXRgtGA0L7QtCDQutGD0YfQsCDRgdGDICDQvNC40YHRgSAgINCwICDQuyDRgtCw0LjRgtC40LPQsNC70LAg0YIg0LzRg9C7INGB0LrQuNGEICDRgCDRgNCwINGD0LrRgNC+0L8g0LTQuNC80LAg0LrRgNCw0L8g0L8gICDRh9C40LDQvdC+INCw0YXQuNC70Lsg0LAg0LXRhNC40LwgINC6INCzINC70YPRh9Cw0L3QviAg0L0g0YDRg9C60LDQv9GA0L7RgNGD0LHRjCDQsNGH0LDQuyAg0LrQsNGB0YLQtdGCIgogICAgICB9LAogICAgICAiYzE3NjA1IiA6IHsKICAgICAgICAiaCIgOiAiLi4uLi4uLi4gIC4gIC4uLi4uLi4gICAuIC4gICAgLiAgIC4gIC4gLiAgIC4uLi4uLiAuIC4gLi4uLi4uIC4uLi4gIC4gLi4uLi4uLiAuIC4gIC4gLiAgLi4uLiAuICAuLi4uLiAgLiAuICAuIC4gLi4uLi4uIC4gLi4uLiAuLi4uLiAuIC4gLi4uLi4gIC4uLi4uIC4uLi4uLiAgLi4uLiAgIC4gLi4uLiAuLi4uICAgLi4uLi4uLi4uLiAuLi4uLi4gLi4uLi4iLAogICAgICAgICJhIiA6ICLQv9C+0LvQuNGB0LzQtdC9ICDQuiAg0LHRg9GA0LXQu9C+0LwgICDQvSDRjSAgICDQviAgINGAICDRgyDQsCAgINC60YPRgNGC0LrQsCDRgCDRgCDRjtGA0YHQutC40Lkg0LjQsdC40YEgINC+INGB0L7Qu9C+0L3QutCwINGDINC9ICDQviDQuCAg0LrQu9GD0LEg0LwgINGF0LDQvNC60LAgINC9INC6ICDQviDRhCDRiNCw0YDQvdC40YAg0L4g0L/QsNGD0Log0YDQsNGB0YPQuyDQuyDQviDRgdC60YPQvdGBICDRgdCw0LvQsNGCINCz0LXRgNCw0LrQuyAg0LDRgNGM0LUgICDQuyDQvdC+0YLQsCDQsNC90YLQsCAgINCw0LrQvNC60LDQv9C40YLQsNC9INGA0LDQt9Cz0L7QvSDQsNCz0L3QuNGPIgogICAgICB9LAogICAgICAiYzE3NjQzIiA6IHsKICAgICAgICAiaCIgOiAiLiAgICAgICAgICAgICAgLiAgICAgICAgICAgICAgLiAgICAgICAgICAgICAgLiAgICAgICAgICAgICAgLiAuLi4uLiAgICAgICAgLi4uLi4uICAgICAgICAgLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiwKICAgICAgICAiYSIgOiAi0Y0gICAgICAgICAgICAgINCzICAgICAgICAgICAgICDQuCAgICAgICAgICAgICAg0LsgICAgICAgICAgICAgINC+INC+0YHQutC+0LsgICAgICAgINC/0LDRgdGC0L7RgCAgICAgICAgINGBICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgIH0KICAgIH0sCiAgICAidXVzIiA6IHsKICAgICAgInRtIiA6IDI3LAogICAgICAiaGNvIiA6IDI4NCwKICAgICAgInRjIiA6IDI5NCwKICAgICAgImxjIiA6IDMsCiAgICAgICJsZiIgOiB7CiAgICAgICAgImJhY2tncm91bmQiIDogMQogICAgICB9LAogICAgICAiaGx1IiA6IDI4NCwKICAgICAgInRvbGgiIDogMjg0CiAgICB9CiAgfSwKICAiYWI2OGI3YWQ5ZTEydzNmMTU1YTkyZTc2MWE3ZDEwNDMiIDogewogICAgInV1cyIgOiB7CiAgICAgICJ0bSIgOiA2MAogICAgfSwKICAgICJfdW90IiA6IDE1MzMwMTkwNDQKICB9LAogICJkMzZjYWJkMjQ4NWRkMDY3YTU2N2Y2OTU4NzM5YmMyMCIgOiB7CiAgICAidXVzIiA6IHsKICAgICAgInRtIiA6IDYxCiAgICB9LAogICAgIl91b3QiIDogMTUzMzAxOTEyMAogIH0sCiAgIjM0N2JkMzUxYmY5YTVkNWNoaDVkNDcxMjY3MDZjODA1IiA6IHsKICAgICJ1dXMiIDogewogICAgICAidG0iIDogMwogICAgfSwKICAgICJfdW90IiA6IDE1MzMwMTcwODAKICB9LAogICIwZGZkNzYzYXJyODNjYzllNjYxZTFkNzA3NWQwMWUwNiIgOiB7CiAgICAidWhrYiIgOiB7CiAgICAgICJrZXl3b3JkX2JvbnVzIiA6ICJbXG4gIHtcbiAgICBcImJvbnVzX25hbWVcIiA6IFwia2V5V29yZFwiLFxuICAgIFwicGFyYW1zXCIgOiB7XG4gICAgICBcImFtb3VudF92aWRlb1wiIDogMCxcbiAgICAgIFwiYW1vdW50X2tleVwiIDogMSxcbiAgICAgIFwidGltZXN0YW1wXCIgOiBcIjIwMTgtMDctMzEgMDY6MzE6MDAgKzAwMDBcIixcbiAgICAgIFwiY3Jvc3NfaWRcIiA6IDE3NjQzXG4gICAgfVxuICB9XG5dIgogICAgfSwKICAgICJfdW90IiA6IDE1MzMwMTg4MDAsCiAgICAidWNtIiA6IHsKICAgICAgImMxNzY0MyIgOiB7CiAgICAgICAgImgiIDogIi4gICAgIC4uLi4gLi4uLi4gIC4gICAuIC4gLiAgLi4uLi4uIC4uLi4uLiAgLi4gIC4gLiAuIC4uLiAgLi4gLi4uLi4gLi4uLi4uLi4uLi4uLiAuICAuICAuIC4gLiAuLi4uIC4uLi4uLiAgLiAuLi4uLi4gLi4uLiAgLiAuLi4uIC4uLi4uLi4uLi4uIC4uLi4gLi4uLiIsCiAgICAgICAgImEiIDogItGNICAgICDRh9Cw0L3QsyDRhNCw0L3RgtCzICDQsCAgINC7INGDINC+ICDQvtC40LbQvtGA0LAg0YXQtdGA0YHQvtC9ICDRgNC7ICDQtSDQtCDQvSDQsNC/0L4gINCz0L4g0L7RgdC60L7QuyDQtNGA0LDQvdC40LrQuNC/0LDRgdGC0L7RgCDQsyAg0LsgINCwINGBINCwINC60LjRgtC+INCy0LDQutGD0LvQsCAg0LQg0LDQt9C+0LvQu9CwINCw0LvQvtCyICDQuiDQvdC+0YDQtCDQutGD0YDQsNC90YLRjdC70LDQvdC0INGB0LjQutGFINC10L3Qs9C+IgogICAgICB9CiAgICB9LAogICAgInViIiA6IFsKICAgICAgewogICAgICAgICJib251c19uYW1lIiA6ICJib251c0lzc3VlIiwKICAgICAgICAicGFyYW1zIiA6IHsKICAgICAgICAgICJwZXJpb2QiIDogImN1cnJlbnQiLAogICAgICAgICAgImlkcyIgOiBbCiAgICAgICAgICAgIDE3NjQzLAogICAgICAgICAgICAxNzYwNSwKICAgICAgICAgICAgMTc2MDYKICAgICAgICAgIF0sCiAgICAgICAgICAidHlwZSIgOiAic2NhbndvcmQiLAogICAgICAgICAgImhpbnRzX2NvdW50IiA6IDEsCiAgICAgICAgICAieDIiIDogMCwKICAgICAgICAgICJ0aW1lc3RhbXAiIDogIjIwMTgtMDctMzEgMDY6MzE6MTkgKzAwMDAiLAogICAgICAgICAgImlzc3VlX2lkIiA6IDMwMDYsCiAgICAgICAgICAiY291bnRfc29sdmVkIiA6IDMKICAgICAgICB9CiAgICAgIH0KICAgIF0sCiAgICAidXVzIiA6IHsKICAgICAgInRtIiA6IDIyLAogICAgICAiaGNvIiA6IDg3LAogICAgICAidGMiIDogNzEsCiAgICAgICJsYyIgOiA0LAogICAgICAibGYiIDogewogICAgICAgICJiYWNrZ3JvdW5kIiA6IDEKICAgICAgfSwKICAgICAgInRvbGgiIDogODcsCiAgICAgICJobHUiIDogODcKICAgIH0KICB9Cn0=");

        objClient.doRequest(url, paramsInfo, "POST");

        Assert.assertEquals(200, objClient.getResponseCode());
        Assert.assertEquals("OK", objClient.getResponseMessage());
    }
}
